from functools import reduce


def digit_product(s):
    """
    一串数字，如 "123456789"
    :param s: "123456789"
    :return: 数字的乘积
    """
    return reduce(lambda x, y: x*y, map(int, [i for i in s]))


def compute(num, adj):
    """
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
    What is the value of this product?
    :param num:
    :param adj:
    :return:
    """
    ans = max(digit_product(num[i: i+adj]) for i in range(len(num) - adj+1))
    return ans


if __name__ == "__main__":
    number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843" \
             "8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557" \
             "6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749" \
             "0358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766" \
             "5727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975" \
             "3697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748" \
             "2166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861" \
             "7866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589604080" \
             "7198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060" \
             "588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
    adjacent = 13
    print(compute(number, adjacent))

